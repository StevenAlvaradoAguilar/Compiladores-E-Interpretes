# Generated from D:/Universidad/Compiladores_e_Interpretes/Compiladores-E-Interpretes/mini-python\miniPython.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from miniPythonParser import miniPythonParser


def serializedATN():
    return [
        4,0,48,390,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
        1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
        1,38,1,38,1,38,1,39,1,39,5,39,232,8,39,10,39,12,39,235,9,39,1,39,
        3,39,238,8,39,1,40,1,40,1,40,5,40,243,8,40,10,40,12,40,246,9,40,
        1,41,1,41,1,41,1,41,1,41,5,41,253,8,41,10,41,12,41,256,9,41,1,41,
        1,41,1,41,1,41,1,41,1,41,5,41,264,8,41,10,41,12,41,267,9,41,1,41,
        3,41,270,8,41,1,42,1,42,3,42,274,8,42,1,42,1,42,4,42,278,8,42,11,
        42,12,42,279,1,42,1,42,4,42,284,8,42,11,42,12,42,285,1,42,1,42,4,
        42,290,8,42,11,42,12,42,291,3,42,294,8,42,1,43,1,43,1,43,1,43,1,
        43,3,43,301,8,43,1,43,3,43,304,8,43,1,43,1,43,1,44,1,44,5,44,310,
        8,44,10,44,12,44,313,9,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
        1,45,4,45,324,8,45,11,45,12,45,325,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,46,1,46,1,47,3,47,339,8,47,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,370,
        8,49,1,50,1,50,1,50,3,50,375,8,50,1,51,3,51,378,8,51,1,51,1,51,5,
        51,382,8,51,10,51,12,51,385,9,51,1,52,1,52,1,52,1,52,1,325,0,53,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,
        93,0,95,0,97,0,99,0,101,0,103,47,105,48,1,0,7,2,0,10,10,13,13,1,
        0,48,57,3,0,65,90,95,95,97,122,1,0,49,57,4,0,33,33,35,38,63,64,94,
        96,2,0,9,9,32,32,4,0,9,10,13,13,32,32,43,43,437,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,109,1,0,0,0,5,111,1,0,0,0,
        7,113,1,0,0,0,9,115,1,0,0,0,11,117,1,0,0,0,13,119,1,0,0,0,15,121,
        1,0,0,0,17,123,1,0,0,0,19,125,1,0,0,0,21,127,1,0,0,0,23,129,1,0,
        0,0,25,131,1,0,0,0,27,133,1,0,0,0,29,136,1,0,0,0,31,138,1,0,0,0,
        33,140,1,0,0,0,35,142,1,0,0,0,37,145,1,0,0,0,39,148,1,0,0,0,41,151,
        1,0,0,0,43,154,1,0,0,0,45,157,1,0,0,0,47,160,1,0,0,0,49,163,1,0,
        0,0,51,165,1,0,0,0,53,168,1,0,0,0,55,173,1,0,0,0,57,178,1,0,0,0,
        59,184,1,0,0,0,61,187,1,0,0,0,63,191,1,0,0,0,65,194,1,0,0,0,67,200,
        1,0,0,0,69,204,1,0,0,0,71,208,1,0,0,0,73,212,1,0,0,0,75,216,1,0,
        0,0,77,223,1,0,0,0,79,237,1,0,0,0,81,239,1,0,0,0,83,269,1,0,0,0,
        85,293,1,0,0,0,87,295,1,0,0,0,89,307,1,0,0,0,91,318,1,0,0,0,93,335,
        1,0,0,0,95,338,1,0,0,0,97,340,1,0,0,0,99,369,1,0,0,0,101,374,1,0,
        0,0,103,377,1,0,0,0,105,386,1,0,0,0,107,108,5,44,0,0,108,2,1,0,0,
        0,109,110,5,59,0,0,110,4,1,0,0,0,111,112,5,61,0,0,112,6,1,0,0,0,
        113,114,5,40,0,0,114,8,1,0,0,0,115,116,5,41,0,0,116,10,1,0,0,0,117,
        118,5,91,0,0,118,12,1,0,0,0,119,120,5,93,0,0,120,14,1,0,0,0,121,
        122,5,126,0,0,122,16,1,0,0,0,123,124,5,58,0,0,124,18,1,0,0,0,125,
        126,5,43,0,0,126,20,1,0,0,0,127,128,5,42,0,0,128,22,1,0,0,0,129,
        130,5,45,0,0,130,24,1,0,0,0,131,132,5,47,0,0,132,26,1,0,0,0,133,
        134,5,42,0,0,134,135,5,42,0,0,135,28,1,0,0,0,136,137,5,37,0,0,137,
        30,1,0,0,0,138,139,5,60,0,0,139,32,1,0,0,0,140,141,5,62,0,0,141,
        34,1,0,0,0,142,143,5,60,0,0,143,144,5,61,0,0,144,36,1,0,0,0,145,
        146,5,62,0,0,146,147,5,61,0,0,147,38,1,0,0,0,148,149,5,61,0,0,149,
        150,5,61,0,0,150,40,1,0,0,0,151,152,5,43,0,0,152,153,5,61,0,0,153,
        42,1,0,0,0,154,155,5,45,0,0,155,156,5,61,0,0,156,44,1,0,0,0,157,
        158,5,42,0,0,158,159,5,61,0,0,159,46,1,0,0,0,160,161,5,47,0,0,161,
        162,5,61,0,0,162,48,1,0,0,0,163,164,5,10,0,0,164,50,1,0,0,0,165,
        166,5,105,0,0,166,167,5,102,0,0,167,52,1,0,0,0,168,169,5,116,0,0,
        169,170,5,104,0,0,170,171,5,101,0,0,171,172,5,110,0,0,172,54,1,0,
        0,0,173,174,5,101,0,0,174,175,5,108,0,0,175,176,5,115,0,0,176,177,
        5,101,0,0,177,56,1,0,0,0,178,179,5,119,0,0,179,180,5,104,0,0,180,
        181,5,105,0,0,181,182,5,108,0,0,182,183,5,101,0,0,183,58,1,0,0,0,
        184,185,5,100,0,0,185,186,5,111,0,0,186,60,1,0,0,0,187,188,5,108,
        0,0,188,189,5,101,0,0,189,190,5,116,0,0,190,62,1,0,0,0,191,192,5,
        105,0,0,192,193,5,110,0,0,193,64,1,0,0,0,194,195,5,98,0,0,195,196,
        5,101,0,0,196,197,5,103,0,0,197,198,5,105,0,0,198,199,5,110,0,0,
        199,66,1,0,0,0,200,201,5,101,0,0,201,202,5,110,0,0,202,203,5,100,
        0,0,203,68,1,0,0,0,204,205,5,100,0,0,205,206,5,101,0,0,206,207,5,
        102,0,0,207,70,1,0,0,0,208,209,5,108,0,0,209,210,5,101,0,0,210,211,
        5,110,0,0,211,72,1,0,0,0,212,213,5,102,0,0,213,214,5,111,0,0,214,
        215,5,114,0,0,215,74,1,0,0,0,216,217,5,114,0,0,217,218,5,101,0,0,
        218,219,5,116,0,0,219,220,5,117,0,0,220,221,5,114,0,0,221,222,5,
        110,0,0,222,76,1,0,0,0,223,224,5,112,0,0,224,225,5,114,0,0,225,226,
        5,105,0,0,226,227,5,110,0,0,227,228,5,116,0,0,228,78,1,0,0,0,229,
        233,3,97,48,0,230,232,3,93,46,0,231,230,1,0,0,0,232,235,1,0,0,0,
        233,231,1,0,0,0,233,234,1,0,0,0,234,238,1,0,0,0,235,233,1,0,0,0,
        236,238,5,48,0,0,237,229,1,0,0,0,237,236,1,0,0,0,238,80,1,0,0,0,
        239,244,3,95,47,0,240,243,3,95,47,0,241,243,3,93,46,0,242,240,1,
        0,0,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,
        0,0,0,245,82,1,0,0,0,246,244,1,0,0,0,247,254,5,39,0,0,248,253,3,
        95,47,0,249,253,3,93,46,0,250,253,3,99,49,0,251,253,3,101,50,0,252,
        248,1,0,0,0,252,249,1,0,0,0,252,250,1,0,0,0,252,251,1,0,0,0,253,
        256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,
        254,1,0,0,0,257,270,5,39,0,0,258,265,5,34,0,0,259,264,3,95,47,0,
        260,264,3,93,46,0,261,264,3,99,49,0,262,264,3,101,50,0,263,259,1,
        0,0,0,263,260,1,0,0,0,263,261,1,0,0,0,263,262,1,0,0,0,264,267,1,
        0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,
        0,0,0,268,270,5,34,0,0,269,247,1,0,0,0,269,258,1,0,0,0,270,84,1,
        0,0,0,271,274,3,97,48,0,272,274,5,48,0,0,273,271,1,0,0,0,273,272,
        1,0,0,0,274,275,1,0,0,0,275,277,5,46,0,0,276,278,3,93,46,0,277,276,
        1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,294,
        1,0,0,0,281,283,3,97,48,0,282,284,3,93,46,0,283,282,1,0,0,0,284,
        285,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,
        289,5,46,0,0,288,290,3,93,46,0,289,288,1,0,0,0,290,291,1,0,0,0,291,
        289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,273,1,0,0,0,293,
        281,1,0,0,0,294,86,1,0,0,0,295,303,5,39,0,0,296,301,3,95,47,0,297,
        301,3,93,46,0,298,301,3,99,49,0,299,301,3,101,50,0,300,296,1,0,0,
        0,300,297,1,0,0,0,300,298,1,0,0,0,300,299,1,0,0,0,301,304,1,0,0,
        0,302,304,1,0,0,0,303,300,1,0,0,0,303,302,1,0,0,0,304,305,1,0,0,
        0,305,306,5,39,0,0,306,88,1,0,0,0,307,311,5,35,0,0,308,310,8,0,0,
        0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,
        0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,3,103,51,0,315,316,1,0,
        0,0,316,317,6,44,0,0,317,90,1,0,0,0,318,319,5,34,0,0,319,320,5,34,
        0,0,320,321,5,34,0,0,321,323,1,0,0,0,322,324,9,0,0,0,323,322,1,0,
        0,0,324,325,1,0,0,0,325,326,1,0,0,0,325,323,1,0,0,0,326,327,1,0,
        0,0,327,328,5,34,0,0,328,329,5,34,0,0,329,330,5,34,0,0,330,331,1,
        0,0,0,331,332,3,103,51,0,332,333,1,0,0,0,333,334,6,45,0,0,334,92,
        1,0,0,0,335,336,7,1,0,0,336,94,1,0,0,0,337,339,7,2,0,0,338,337,1,
        0,0,0,339,96,1,0,0,0,340,341,7,3,0,0,341,98,1,0,0,0,342,370,3,1,
        0,0,343,370,3,3,1,0,344,370,3,5,2,0,345,370,3,7,3,0,346,370,3,9,
        4,0,347,370,3,11,5,0,348,370,3,13,6,0,349,370,3,15,7,0,350,370,3,
        17,8,0,351,370,3,19,9,0,352,370,3,21,10,0,353,370,5,32,0,0,354,370,
        3,23,11,0,355,370,3,25,12,0,356,370,3,27,13,0,357,370,3,29,14,0,
        358,370,3,31,15,0,359,370,3,33,16,0,360,370,3,35,17,0,361,370,3,
        37,18,0,362,370,3,39,19,0,363,370,3,5,2,0,364,370,3,41,20,0,365,
        370,3,43,21,0,366,370,3,45,22,0,367,370,3,47,23,0,368,370,3,49,24,
        0,369,342,1,0,0,0,369,343,1,0,0,0,369,344,1,0,0,0,369,345,1,0,0,
        0,369,346,1,0,0,0,369,347,1,0,0,0,369,348,1,0,0,0,369,349,1,0,0,
        0,369,350,1,0,0,0,369,351,1,0,0,0,369,352,1,0,0,0,369,353,1,0,0,
        0,369,354,1,0,0,0,369,355,1,0,0,0,369,356,1,0,0,0,369,357,1,0,0,
        0,369,358,1,0,0,0,369,359,1,0,0,0,369,360,1,0,0,0,369,361,1,0,0,
        0,369,362,1,0,0,0,369,363,1,0,0,0,369,364,1,0,0,0,369,365,1,0,0,
        0,369,366,1,0,0,0,369,367,1,0,0,0,369,368,1,0,0,0,370,100,1,0,0,
        0,371,375,7,4,0,0,372,373,5,194,0,0,373,375,5,191,0,0,374,371,1,
        0,0,0,374,372,1,0,0,0,375,102,1,0,0,0,376,378,5,13,0,0,377,376,1,
        0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,383,5,10,0,0,380,382,7,
        5,0,0,381,380,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,
        0,0,0,384,104,1,0,0,0,385,383,1,0,0,0,386,387,7,6,0,0,387,388,1,
        0,0,0,388,389,6,52,0,0,389,106,1,0,0,0,24,0,233,237,242,244,252,
        254,263,265,269,273,279,285,291,293,300,303,311,325,338,369,374,
        377,383,1,6,0,0
    ]

class miniPythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMA = 1
    PyCOMA = 2
    ASIGN = 3
    PIZQ = 4
    PDER = 5
    CIZQ = 6
    CDER = 7
    VIR = 8
    DOSPUNT = 9
    MAS = 10
    MULT = 11
    MEN = 12
    DIV = 13
    POT = 14
    MOD = 15
    MENQUE = 16
    MAYQUE = 17
    MENQUEEQUAL = 18
    MAYQUEEQUAL = 19
    EQUALEQUAL = 20
    MASEQUAL = 21
    MENEQUAL = 22
    MULTEQUAL = 23
    DIVEQUAL = 24
    HASH = 25
    IF = 26
    THEN = 27
    ELSE = 28
    WHILE = 29
    DO = 30
    LET = 31
    IN = 32
    BEGIN = 33
    END = 34
    DEF = 35
    LEN = 36
    FOR = 37
    RETURN = 38
    PRINT = 39
    INTEGER = 40
    IDENTIFIER = 41
    STRING = 42
    FLOAT = 43
    CHARCONTS = 44
    COMENTLINEA = 45
    COMENTMULTILINEA = 46
    NEWLINE = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "';'", "'='", "'('", "')'", "'['", "']'", "'~'", "':'", 
            "'+'", "'*'", "'-'", "'/'", "'**'", "'%'", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'+='", "'-='", "'*='", "'/='", "'\\n'", "'if'", 
            "'then'", "'else'", "'while'", "'do'", "'let'", "'in'", "'begin'", 
            "'end'", "'def'", "'len'", "'for'", "'return'", "'print'" ]

    symbolicNames = [ "<INVALID>",
            "COMA", "PyCOMA", "ASIGN", "PIZQ", "PDER", "CIZQ", "CDER", "VIR", 
            "DOSPUNT", "MAS", "MULT", "MEN", "DIV", "POT", "MOD", "MENQUE", 
            "MAYQUE", "MENQUEEQUAL", "MAYQUEEQUAL", "EQUALEQUAL", "MASEQUAL", 
            "MENEQUAL", "MULTEQUAL", "DIVEQUAL", "HASH", "IF", "THEN", "ELSE", 
            "WHILE", "DO", "LET", "IN", "BEGIN", "END", "DEF", "LEN", "FOR", 
            "RETURN", "PRINT", "INTEGER", "IDENTIFIER", "STRING", "FLOAT", 
            "CHARCONTS", "COMENTLINEA", "COMENTMULTILINEA", "NEWLINE", "WS" ]

    ruleNames = [ "COMA", "PyCOMA", "ASIGN", "PIZQ", "PDER", "CIZQ", "CDER", 
                  "VIR", "DOSPUNT", "MAS", "MULT", "MEN", "DIV", "POT", 
                  "MOD", "MENQUE", "MAYQUE", "MENQUEEQUAL", "MAYQUEEQUAL", 
                  "EQUALEQUAL", "MASEQUAL", "MENEQUAL", "MULTEQUAL", "DIVEQUAL", 
                  "HASH", "IF", "THEN", "ELSE", "WHILE", "DO", "LET", "IN", 
                  "BEGIN", "END", "DEF", "LEN", "FOR", "RETURN", "PRINT", 
                  "INTEGER", "IDENTIFIER", "STRING", "FLOAT", "CHARCONTS", 
                  "COMENTLINEA", "COMENTMULTILINEA", "DIGIT", "LETTER", 
                  "DIGITNOTZERO", "SIMBOLS", "SPECIALSIMBOLS", "NEWLINE", 
                  "WS" ]

    grammarFileName = "miniPython.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class MyCoolDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: miniPythonLexer = lexer
        def pull_token(self):
            return super(miniPythonLexer, self.lexer).nextToken()
    denter = None
    def nextToken(self):
        if not self.denter:
            self.denter = self.MyCoolDenter(self, self.NEWLINE, miniPythonParser.INDENT, miniPythonParser.DEDENT, False)
        return self.denter.next_token()


